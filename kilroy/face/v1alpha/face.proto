syntax = "proto3";

package kilroy.face.v1alpha;

import "google/protobuf/timestamp.proto";

message GetMetadataRequest {}

message GetMetadataResponse {
  string key = 1;
  string description = 2;
}

message GetPostSchemaRequest {}

message GetPostSchemaResponse {
  string schema = 1;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_LOADING = 1;
  STATUS_READY = 2;
}

message GetStatusRequest {}

message GetStatusResponse {
  Status status = 1;
}

message WatchStatusRequest {}

message WatchStatusResponse {
  Status status = 1;
}

message GetConfigSchemaRequest {}

message GetConfigSchemaResponse {
  string schema = 1;
}

message GetConfigRequest {}

message GetConfigResponse {
  string config = 1;
}

message WatchConfigRequest {}

message WatchConfigResponse {
  string config = 1;
}

message SetConfigRequest {
  string config = 1;
}

message SetConfigResponse {
  string config = 1;
}

message GeneratedPost {
  string content = 1;
}

message PostRequest {
  GeneratedPost post = 1;
}

message PostResponse {
  string post_id = 1;
}

message ScoreRequest {
  string post_id = 1;
}

message ScoreResponse {
  double score = 1;
}

message RealPost {
  string id = 1;
  string content = 2;
  double score = 3;
}

message ScrapRequest {
  optional uint64 limit = 1;
  optional google.protobuf.Timestamp before = 2;
  optional google.protobuf.Timestamp after = 3;
}

message ScrapResponse {
  RealPost post = 1;
}

service FaceService {
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}
  rpc GetPostSchema(GetPostSchemaRequest) returns (GetPostSchemaResponse) {}
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
  rpc WatchStatus(WatchStatusRequest) returns (stream WatchStatusResponse) {}
  rpc GetConfigSchema(GetConfigSchemaRequest) returns (GetConfigSchemaResponse) {}
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {}
  rpc WatchConfig(WatchConfigRequest) returns (stream WatchConfigResponse) {}
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {}
  rpc Post(PostRequest) returns (PostResponse) {}
  rpc Score(ScoreRequest) returns (ScoreResponse) {}
  rpc Scrap(ScrapRequest) returns (stream ScrapResponse) {}
}
